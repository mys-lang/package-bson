c"""source-before-namespace
#include <cstring>
"""

class BsonError(Error):
    message: string

class _Reader:
    _data: bytes
    _pos: i64

    func __init__(self, data: bytes):
        self._data = data
        self._pos = 0

    func available(self) -> bool:
        return self._pos < self._data.length()

    func read_u8(self) -> u8:
        if not self.available():
            raise BsonError("No more data available.")

        value = self._data[self._pos]
        self._pos += 1

        return value

    func read_u16(self) -> u16:
        return u16(self.read_u8()) | (u16(self.read_u8()) << 8)

    func read_u32(self) -> u32:
        return u32(self.read_u16()) | (u32(self.read_u16()) << 16)

    func read_u64(self) -> u64:
        return u64(self.read_u32()) | (u64(self.read_u32()) << 32)

    func read_i32(self) -> i32:
        return i32(self.read_u32())

    func read_i64(self) -> i64:
        return i64(self.read_u64())

    func read_f64(self) -> f64:
        value = 0.0
        ivalue = self.read_u64()
        c"memcpy(&value, &ivalue, sizeof(value));"

        return value

    func read_bytes(self, count: i64) -> bytes:
        data = b""

        for _ in range(count):
            data += self.read_u8()

        return data

class _Writer:
    _data: bytes

    func __init__(self):
        self._data = b""

    func data(self) -> bytes:
        return self._data

    func write_i32_at(self, offset: i64, value: i32):
        self._data[offset + 0] = u8(value)
        self._data[offset + 1] = u8(value >> 8)
        self._data[offset + 2] = u8(value >> 16)
        self._data[offset + 3] = u8(value >> 24)

    func write_u8(self, value: u8):
        self._data += value

    func write_u16(self, value: u16):
        self.write_u8(u8(value))
        self.write_u8(u8(value >> 8))

    func write_u32(self, value: u32):
        self.write_u16(u16(value))
        self.write_u16(u16(value >> 16))

    func write_u64(self, value: u64):
        self.write_u32(u32(value))
        self.write_u32(u32(value >> 32))

    func write_i32(self, value: i32):
        self.write_u32(u32(value))

    func write_i64(self, value: i64):
        self.write_u64(u64(value))

    func write_f64(self, value: f64):
        ivalue = 0
        c"memcpy(&ivalue, &value, sizeof(ivalue));"
        self.write_i64(ivalue)

    func write_bytes(self, value: bytes):
        self._data += value

trait Element:
    """An element in a BSON document.

    """

    func double(self) -> f64:
        raise BsonError("Not a double.")

    func string(self) -> string:
        raise BsonError("Not a string.")

    func document(self) -> [(string, Element)]:
        raise BsonError("Not a document.")

    func get(self, name: string) -> Element:
        raise BsonError("Not a document.")

    func array(self) -> [Element]:
        raise BsonError("Not an array.")

    func at(self, index: i64) -> Element:
        raise BsonError("Not an array.")

    func binary(self) -> (u8, bytes):
        raise BsonError("Not a binary.")

    func boolean(self) -> bool:
        raise BsonError("Not a boolean.")

    func int32(self) -> i32:
        raise BsonError("Not an int32.")

    func int64(self) -> i64:
        raise BsonError("Not an int64.")

class Double(Element):
    """A double.

    """

    value: f64

    func double(self) -> f64:
        return self.value

class String(Element):
    """A string.

    """

    value: string

    func string(self) -> string:
        return self.value

class Document(Element):
    """A document.

    """

    elements: [(string, Element)]

    func __init__(self, elements: [(string, Element)] = []):
        self.elements = elements

    func document(self) -> [(string, Element)]:
        return self.elements

    func get(self, name: string) -> Element:
        for key, element in self.elements:
            if key == name:
                return element

        raise BsonError(f"Element '{name}' not found.")

class Array(Element):
    """An array.

    """

    doc: Document

    func __init__(self, elements: [Element] = []):
        self.doc = Document()

        for i, element in enumerate(elements):
            self.doc.elements.append((str(i), element))

    func append(self, element: Element):
        index = str(self.doc.elements.length())
        self.doc.elements.append((index, element))

    func array(self) -> [Element]:
        return [element for _, element in self.doc.elements]

    func at(self, index: i64) -> Element:
        return self.doc.elements[index][1]

class Binary(Element):
    """A binary blob.

    """

    value: (u8, bytes)

    func binary(self) -> (u8, bytes):
        return self.value

class ObjectId(Element):
    """An object id.

    """

    value: bytes

    func object_id(self) -> bytes:
        return self.value

class Boolean(Element):
    """A boolean.

    """

    value: bool

    func boolean(self) -> bool:
        return self.value

class Int32(Element):
    """An i32.

    """

    value: i32

    func int32(self) -> i32:
        return self.value

class Int64(Element):
    """An i64.

    """

    value: i64

    func int64(self) -> i64:
        return self.value

func _decode_cstring(reader: _Reader) -> string:
    data = b""

    while True:
        value = reader.read_u8()

        if value == 0:
            break

        data += value

    return string(data)

func _decode_double(reader: _Reader) -> Double:
    return Double(reader.read_f64())

func _decode_string(reader: _Reader) -> String:
    length = reader.read_i32()
    element = String(string(reader.read_bytes(i64(length - 1))))
    reader.read_u8()

    return element

func _decode_document(reader: _Reader) -> Document:
    reader.read_i32()
    document = Document()

    while True:
        kind = reader.read_u8()

        if kind == 0:
            break

        name = _decode_cstring(reader)
        element: Element? = None

        match kind:
            case 1:
                element = _decode_double(reader)
            case 2:
                element = _decode_string(reader)
            case 3:
                element = _decode_document(reader)
            case 4:
                element = _decode_array(reader)
            case 5:
                element = _decode_binary(reader)
            case 7:
                element = _decode_object_id(reader)
            case 8:
                element = _decode_boolean(reader)
            case 16:
                element = _decode_int32(reader)
            case 18:
                element = _decode_int64(reader)
            case _:
                raise BsonError(f"Bad kind {kind}.")

        document.elements.append((name, element))

    return document

func _decode_array(reader: _Reader) -> Array:
    array = Array()
    array.doc = _decode_document(reader)

    return array

func _decode_binary(reader: _Reader) -> Binary:
    length = reader.read_i32()
    subtype = reader.read_u8()
    data = reader.read_bytes(i64(length))

    return Binary((subtype, data))

func _decode_object_id(reader: _Reader) -> ObjectId:
    return ObjectId(reader.read_bytes(12))

func _decode_boolean(reader: _Reader) -> Boolean:
    return Boolean(reader.read_u8() == 1)

func _decode_int32(reader: _Reader) -> Int32:
    return Int32(reader.read_i32())

func _decode_int64(reader: _Reader) -> Int64:
    return Int64(reader.read_i64())

func decode(data: bytes) -> Document:
    """Decode given BSON document.

    """

    return _decode_document(_Reader(data))

func _encode_double(writer: _Writer, name: string, element: Double):
    writer.write_u8(1)
    writer.write_bytes(name.to_utf8())
    writer.write_u8(0)
    writer.write_f64(element.value)

func _encode_string(writer: _Writer, name: string, element: String):
    writer.write_u8(2)
    writer.write_bytes(name.to_utf8())
    writer.write_u8(0)
    value = element.value.to_utf8()
    writer.write_i32(i32(value.length()) + 1)
    writer.write_bytes(value)
    writer.write_u8(0)

func _encode_document_no_header(writer: _Writer, document: Document):
    start = writer.data().length()
    writer.write_i32(0)

    for name, element in document.elements:
        match element:
            case Double() as double_element:
                _encode_double(writer, name, double_element)
            case String() as string_element:
                _encode_string(writer, name, string_element)
            case Document() as document_element:
                _encode_document(writer, name, document_element)
            case Array() as array_element:
                _encode_array(writer, name, array_element)
            case Boolean() as boolean_element:
                _encode_boolean(writer, name, boolean_element)
            case Int32() as int32_element:
                _encode_int32(writer, name, int32_element)
            case Int64() as int64_element:
                _encode_int64(writer, name, int64_element)
            case _:
                raise BsonError(f"Bad element '{element}'.")

    writer.write_u8(0)
    writer.write_i32_at(start, i32(writer.data().length() - start))

func _encode_document(writer: _Writer, name: string, element: Document):
    writer.write_u8(3)
    writer.write_bytes(name.to_utf8())
    writer.write_u8(0)
    _encode_document_no_header(writer, element)

func _encode_array(writer: _Writer, name: string, element: Array):
    writer.write_u8(4)
    writer.write_bytes(name.to_utf8())
    writer.write_u8(0)
    _encode_document_no_header(writer, element.doc)

func _encode_boolean(writer: _Writer, name: string, element: Boolean):
    writer.write_u8(8)
    writer.write_bytes(name.to_utf8())
    writer.write_u8(0)
    writer.write_u8(u8(1 if element.value else 0))

func _encode_int32(writer: _Writer, name: string, element: Int32):
    writer.write_u8(16)
    writer.write_bytes(name.to_utf8())
    writer.write_u8(0)
    writer.write_i32(element.value)

func _encode_int64(writer: _Writer, name: string, element: Int64):
    writer.write_u8(18)
    writer.write_bytes(name.to_utf8())
    writer.write_u8(0)
    writer.write_i64(element.value)

func encode(document: Document) -> bytes:
    """Encode given BSON document.

    """

    writer = _Writer()
    _encode_document_no_header(writer, document)

    return writer.data()

test small_mongodb():
    encoded = (
        b"\x24\x00\x00\x00"
        b"\x10" b"whatsmyuri\x00" b"\x01\x00\x00\x00"
        b"\x02" b"$db\x00" b"\x06\x00\x00\x00" b"admin\x00"
        b"\x00")

    document = decode(encoded)
    assert document.get("whatsmyuri").int32() == 1
    assert document.get("$db").string() == "admin"

    encoded_swapped = (
        b"\x24\x00\x00\x00"
        b"\x02" b"$db\x00" b"\x06\x00\x00\x00" b"admin\x00"
        b"\x10" b"whatsmyuri\x00" b"\x01\x00\x00\x00"
        b"\x00")

    assert encode(document) in [encoded, encoded_swapped]

test mongodb_list_databases():
    encoded = (
        b"\x5a\x00\x00\x00\x01\x6c\x69\x73\x74\x44\x61\x74\x61\x62\x61\x73"
        b"\x65\x73\x00\x00\x00\x00\x00\x00\x00\xf0\x3f\x08\x6e\x61\x6d\x65"
        b"\x4f\x6e\x6c\x79\x00\x00\x03\x6c\x73\x69\x64\x00\x1e\x00\x00\x00"
        b"\x05\x69\x64\x00\x10\x00\x00\x00\x04\xfb\xe9\x2e\x09\xc9\xc8\x45"
        b"\x09\xa8\x01\x1d\x0f\x73\xe5\xf7\x46\x00\x02\x24\x64\x62\x00\x06"
        b"\x00\x00\x00\x61\x64\x6d\x69\x6e\x00\x00")

    document = decode(encoded)
    assert document.get("listDatabases").double() == 1.0
    assert not document.get("nameOnly").boolean()
    assert document.get("lsid").get("id").binary() == (
        4,
        b"\xfb\xe9\x2e\x09\xc9\xc8\x45\x09\xa8\x01\x1d\x0f\x73\xe5\xf7\x46")
    assert document.get("$db").string() == "admin"

test double():
    document = Document([("foo", Double(1.0))])
    encoded = encode(document)
    assert encoded == b"\x12\x00\x00\x00\x01foo\x00\x00\x00\x00\x00\x00\x00\xf0?\x00"
    decoded = decode(encoded)
    assert decoded.get("foo").double() == 1.0

test string():
    document = Document([("foo", String("bar"))])
    encoded = encode(document)
    assert encoded == b"\x12\x00\x00\x00\x02foo\x00\x04\x00\x00\x00bar\x00\x00"
    decoded = decode(encoded)
    assert decoded.get("foo").string() == "bar"

test document():
    document = Document([("a", Document()), ("b", Boolean(False))])
    encoded = encode(document)
    assert encoded == (
        b"\x11\x00\x00\x00\x03a\x00\x05\x00\x00\x00\x00\x08b\x00\x00\x00")
    decoded = decode(encoded)
    assert decoded.document().length() == 2
    assert decoded.get("a").document().length() == 0
    assert not decoded.get("b").boolean()
    document.elements.append(("foo", String("bar")))
    assert document.get("foo").string() == "bar"

    try:
        document.get("bar")
        assert False
    except BsonError as error:
        assert error.message == "Element 'bar' not found."

test array():
    document = Document([("foo", Array([Int64(5)]))])
    encoded = encode(document)
    assert encoded == (
        b"\x1a\x00\x00\x00\x04foo\x00\x10\x00\x00\x00\x120\x00\x05\x00"
        b"\x00\x00\x00\x00\x00\x00\x00\x00")
    decoded = decode(encoded)
    assert decoded.get("foo").array().length() == 1
    assert decoded.get("foo").at(0).int64() == 5
